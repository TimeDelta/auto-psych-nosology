"""Utility script to inspect Parquet files generated by the knowledge graph pipeline."""

from __future__ import annotations

import argparse
import sys
from pathlib import Path
from typing import Iterable, Sequence

import pandas as pd


def _format_size(num_bytes: int) -> str:
    units = ["B", "KB", "MB", "GB", "TB"]
    size = float(num_bytes)
    for unit in units:
        if size < 1024 or unit == units[-1]:
            return f"{size:0.2f} {unit}"
        size /= 1024
    return f"{size:0.2f} TB"


def inspect_parquet(
    path: Path,
    head: int,
    columns: Sequence[str] | None,
    show_describe: bool,
    show_null_counts: bool,
) -> None:
    print(f"=== {path} ===")
    if not path.exists():
        print("! File does not exist", file=sys.stderr)
        return
    try:
        df = pd.read_parquet(path, columns=list(columns) if columns else None)
    except Exception as exc:  # pragma: no cover - debugging helper
        print(f"! Failed to read Parquet: {exc}", file=sys.stderr)
        return

    size = _format_size(path.stat().st_size)
    print(f"Rows: {len(df):,}")
    print(f"Columns: {len(df.columns):,}")
    print(f"On-disk size: {size}")
    print("Column dtypes:")
    for col, dtype in df.dtypes.items():
        print(f"  - {col}: {dtype}")

    if show_null_counts:
        nulls = df.isna().sum()
        if nulls.any():
            print("Null value counts:")
            for col, count in nulls.items():
                if count:
                    print(f"  - {col}: {count:,}")
        else:
            print("No null values detected.")

    if show_describe:
        numeric_cols = df.select_dtypes(include=["number"]).columns
        if numeric_cols.size:
            print("Descriptive statistics (numeric columns):")
            print(df[numeric_cols].describe(include="all"))
        else:
            print("No numeric columns available for describe().")

    if head:
        print(f"\nSample rows (head={head}):")
        print(df.head(head))


def parse_args(argv: Iterable[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Inspect Parquet debugging information."
    )
    parser.add_argument(
        "paths", type=Path, nargs="+", help="One or more Parquet file paths."
    )
    parser.add_argument(
        "--columns",
        metavar="COL",
        nargs="*",
        help="Optional subset of columns to load for inspection.",
    )
    parser.add_argument(
        "--head",
        type=int,
        default=5,
        help="Number of sample rows to display (default: 5, set to 0 to skip).",
    )
    parser.add_argument(
        "--describe",
        action="store_true",
        help="Show pandas describe() output for numeric columns.",
    )
    parser.add_argument(
        "--null-counts",
        action="store_true",
        help="Display null-value counts per column.",
    )
    return parser.parse_args(argv)


def main(argv: Iterable[str] | None = None) -> int:
    args = parse_args(argv if argv is not None else sys.argv[1:])
    for path in args.paths:
        inspect_parquet(
            path,
            head=max(args.head, 0),
            columns=args.columns,
            show_describe=args.describe,
            show_null_counts=args.null_counts,
        )
        print()
    return 0


if __name__ == "__main__":  # pragma: no cover - script entrypoint
    raise SystemExit(main())
